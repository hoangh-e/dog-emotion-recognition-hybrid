"""
Demo script cho Roboflow Data Pipeline

Script n√†y demo c√°ch s·ª≠ d·ª•ng c√°c ch·ª©c nƒÉng m·ªõi trong package dog_emotion_ml
ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Roboflow v√† chu·∫©n h√≥a features theo y√™u c·∫ßu.

C√°c t√≠nh nƒÉng ƒë∆∞·ª£c demo:
1. RoboflowDataProcessor - X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Roboflow
2. DataNormalizer - Chu·∫©n h√≥a n√¢ng cao (Z-score cho emotion, pass-through cho tail)
3. EmotionMLClassifier v·ªõi advanced normalization
4. T√≠ch h·ª£p pipeline ho√†n ch·ªânh
"""

import pandas as pd
import numpy as np
from pathlib import Path

def demo_roboflow_processor():
    """Demo RoboflowDataProcessor - X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Roboflow"""
    print("=== Demo RoboflowDataProcessor ===")
    print("Ch·ª©c nƒÉng: X·ª≠ l√Ω dataset t·ª´ Roboflow, t√≠ch h·ª£p YOLO + ResNet")
    
    from dog_emotion_ml import RoboflowDataProcessor, create_sample_roboflow_structure
    
    # 1. T·∫°o sample Roboflow structure ƒë·ªÉ test
    sample_path = Path("./sample_roboflow_data")
    if not sample_path.exists():
        create_sample_roboflow_structure(sample_path)
        print(f"‚úÖ T·∫°o c·∫•u tr√∫c Roboflow m·∫´u t·∫°i: {sample_path}")
    
    # 2. Kh·ªüi t·∫°o processor (kh√¥ng c√≥ real models, s·∫Ω d√πng dummy data)
    processor = RoboflowDataProcessor(
        dataset_path=sample_path,
        yolo_tail_model_path=None,  # S·∫Ω d√πng dummy confidence scores
        resnet_emotion_model_path=None  # S·∫Ω d√πng dummy confidence scores
    )
    
    # 3. Demo l·∫•y emotion labels t·ª´ data.yaml
    emotion_labels = processor.get_emotion_labels_from_yaml()
    print(f"üìã Emotion labels t·ª´ data.yaml: {emotion_labels}")
    
    # 4. Demo x·ª≠ l√Ω m·ªôt ·∫£nh (dummy)
    print("\nüñºÔ∏è  Demo x·ª≠ l√Ω ·∫£nh ƒë∆°n l·∫ª:")
    dummy_image_path = "dummy_image.jpg"
    
    emotion_scores = processor.process_image_with_resnet_emotion(dummy_image_path)
    print(f"   Emotion scores: {emotion_scores}")
    
    tail_scores = processor.process_image_with_yolo_tail(dummy_image_path)
    print(f"   Tail scores: {tail_scores}")
    
    manual_label = processor.get_manual_label_from_filename(dummy_image_path)
    print(f"   Manual label: {manual_label}")
    
    print("‚úÖ Demo RoboflowDataProcessor ho√†n th√†nh!")


def demo_data_normalizer():
    """Demo DataNormalizer - Chu·∫©n h√≥a n√¢ng cao theo y√™u c·∫ßu"""
    print("\n=== Demo DataNormalizer ===")
    print("Ch·ª©c nƒÉng: Z-score cho emotion features, pass-through cho tail features")
    
    from dog_emotion_ml import DataNormalizer
    
    # 1. T·∫°o sample data
    np.random.seed(42)
    n_samples = 100
    
    # Emotion features (probabilities summing to ~1)
    emotion_data = np.random.dirichlet([1, 1, 1, 1], n_samples)
    print(f"üìä D·ªØ li·ªáu emotion g·ªëc:")
    print(f"   Shape: {emotion_data.shape}")
    print(f"   Sample:\n{emotion_data[:3]}")
    print(f"   Mean: {emotion_data.mean(axis=0)}")
    print(f"   Std: {emotion_data.std(axis=0)}")
    
    # Tail features (binary ho·∫∑c probabilities)
    tail_data = np.random.dirichlet([1, 1, 1], n_samples)
    print(f"\nüìä D·ªØ li·ªáu tail g·ªëc:")
    print(f"   Shape: {tail_data.shape}")
    print(f"   Sample:\n{tail_data[:3]}")
    
    # 2. Kh·ªüi t·∫°o normalizer
    normalizer = DataNormalizer()
    
    # 3. Fit v√† transform
    emotion_norm, tail_norm = normalizer.fit_transform(emotion_data, tail_data)
    
    print(f"\nüîÑ Sau chu·∫©n h√≥a:")
    print(f"   Emotion (Z-score) sample:\n{emotion_norm[:3]}")
    print(f"   Emotion mean: {emotion_norm.mean(axis=0)}")
    print(f"   Emotion std: {emotion_norm.std(axis=0)}")
    
    print(f"\n   Tail (pass-through) sample:\n{tail_norm[:3]}")
    print(f"   Tail mean: {tail_norm.mean(axis=0)}")
    
    # 4. Test inverse transform
    emotion_recovered = normalizer.inverse_transform_emotion(emotion_norm)
    recovery_error = np.mean(np.abs(emotion_data - emotion_recovered))
    print(f"\nüîç Ki·ªÉm tra inverse transform:")
    print(f"   Recovery error: {recovery_error:.6f}")
    
    # 5. Demo normalize_dataset
    print(f"\nüìã Demo normalize_dataset:")
    sample_df = pd.DataFrame({
        'filename': [f'img_{i}.jpg' for i in range(10)],
        'sad': emotion_data[:10, 0],
        'angry': emotion_data[:10, 1], 
        'happy': emotion_data[:10, 2],
        'relaxed': emotion_data[:10, 3],
        'down': tail_data[:10, 0],
        'up': tail_data[:10, 1],
        'mid': tail_data[:10, 2],
        'label': ['happy'] * 10
    })
    
    print("   Dataset g·ªëc:")
    print(sample_df.head())
    
    normalized_df = normalizer.normalize_dataset(sample_df, fit=False)  # Already fitted
    print("\n   Dataset sau chu·∫©n h√≥a:")
    print(normalized_df.head())
    
    print("‚úÖ Demo DataNormalizer ho√†n th√†nh!")


def demo_emotion_ml_with_advanced_normalization():
    """Demo EmotionMLClassifier v·ªõi advanced normalization"""
    print("\n=== Demo EmotionMLClassifier v·ªõi Advanced Normalization ===")
    print("Ch·ª©c nƒÉng: T√≠ch h·ª£p chu·∫©n h√≥a n√¢ng cao v√†o pipeline ML")
    
    from dog_emotion_ml import EmotionMLClassifier
    
    # 1. T·∫°o sample dataset
    np.random.seed(42)
    n_samples = 200
    
    # T·∫°o sample data theo format y√™u c·∫ßu
    emotion_data = np.random.dirichlet([1, 1, 1, 1], n_samples)
    tail_data = np.random.dirichlet([1, 1, 1], n_samples)
    labels = np.random.choice(['sad', 'angry', 'happy', 'relaxed'], n_samples)
    
    # T·∫°o DataFrame
    sample_df = pd.DataFrame({
        'filename': [f'img_{i}.jpg' for i in range(n_samples)],
        'sad': emotion_data[:, 0],
        'angry': emotion_data[:, 1], 
        'happy': emotion_data[:, 2],
        'relaxed': emotion_data[:, 3],
        'down': tail_data[:, 0],
        'up': tail_data[:, 1],
        'mid': tail_data[:, 2],
        'label': labels
    })
    
    # L∆∞u sample data
    train_file = 'sample_train_data.csv'
    test_file = 'sample_test_data.csv'
    
    sample_df[:150].to_csv(train_file, index=False)
    sample_df[150:].to_csv(test_file, index=False)
    
    print(f"üìÅ T·∫°o d·ªØ li·ªáu m·∫´u:")
    print(f"   Training: {train_file} ({len(sample_df[:150])} m·∫´u)")
    print(f"   Test: {test_file} ({len(sample_df[150:])} m·∫´u)")
    
    # 2. Kh·ªüi t·∫°o classifier
    classifier = EmotionMLClassifier(random_state=42)
    
    # 3. T·∫£i d·ªØ li·ªáu
    classifier.load_train_dataset(train_file)
    classifier.load_test_dataset(test_file)
    
    # 4. Chu·∫©n b·ªã d·ªØ li·ªáu v·ªõi advanced normalization
    print(f"\nüîÑ Chu·∫©n b·ªã d·ªØ li·ªáu v·ªõi advanced normalization...")
    classifier.prepare_training_data(use_advanced_normalization=True)
    classifier.prepare_test_data(use_advanced_normalization=True)
    
    # 5. Hu·∫•n luy·ªán m·ªôt v√†i models ƒë·ªÉ test
    print(f"\nü§ñ Hu·∫•n luy·ªán models...")
    classifier.train_logistic_regression()
    classifier.train_random_forest()
    classifier.train_xgboost()
    
    # 6. ƒê√°nh gi√° models
    print(f"\nüìä ƒê√°nh gi√° models:")
    for model_name in classifier.trained_models:
        accuracy = classifier.evaluate_model(model_name)
        print(f"   {model_name}: {accuracy:.4f}")
    
    # 7. Demo normalize_features_advanced method
    print(f"\nüîß Demo normalize_features_advanced method:")
    test_emotion = emotion_data[:5]
    test_tail = tail_data[:5]
    
    normalized_features = classifier.normalize_features_advanced(
        test_emotion, test_tail, fit=False
    )
    print(f"   Normalized features shape: {normalized_features.shape}")
    print(f"   Normalized features sample:\n{normalized_features[:2]}")
    
    # Clean up
    Path(train_file).unlink(missing_ok=True)
    Path(test_file).unlink(missing_ok=True)
    print(f"\nüßπ ƒê√£ d·ªçn d·∫πp file t·∫°m")
    print("‚úÖ Demo EmotionMLClassifier ho√†n th√†nh!")


def demo_roboflow_integration():
    """Demo t√≠ch h·ª£p v·ªõi Roboflow (gi·∫£ l·∫≠p)"""
    print("\n=== Demo Roboflow Integration ===")
    print("Ch·ª©c nƒÉng: T√≠ch h·ª£p ho√†n ch·ªânh t·ª´ Roboflow ƒë·∫øn ML training")
    
    from dog_emotion_ml import EmotionMLClassifier
    
    # Kh·ªüi t·∫°o classifier
    classifier = EmotionMLClassifier(random_state=42)
    
    # Demo create_dataset_from_roboflow (s·∫Ω fail v√¨ kh√¥ng c√≥ real Roboflow data)
    print("üîó Demo create_dataset_from_roboflow (simulation):")
    print("   Trong th·ª±c t·∫ø, method n√†y s·∫Ω:")
    print("   1. T·∫£i d·ªØ li·ªáu t·ª´ Roboflow dataset")
    print("   2. S·ª≠ d·ª•ng YOLO model ƒë·ªÉ detect tail status")
    print("   3. S·ª≠ d·ª•ng ResNet model ƒë·ªÉ detect emotion")
    print("   4. K·∫øt h·ª£p v·ªõi manual labels t·ª´ data.yaml")
    print("   5. T·∫°o dataset CSV v·ªõi format chu·∫©n")
    
    # Gi·∫£ l·∫≠p k·∫øt qu·∫£
    print(f"\nüìã K·∫øt qu·∫£ mong ƒë·ª£i:")
    print("   - Dataset CSV v·ªõi c·ªôt: filename, sad, angry, happy, relaxed, down, up, mid, label")
    print("   - Emotion features t·ª´ ResNet (confidence scores)")
    print("   - Tail features t·ª´ YOLO (binary detection)")
    print("   - Manual labels t·ª´ data.yaml")
    
    print("‚úÖ Demo Roboflow Integration ho√†n th√†nh!")


def demo_complete_pipeline():
    """Demo pipeline ho√†n ch·ªânh t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi"""
    print("\n=== Demo Complete Pipeline ===")
    print("Pipeline ho√†n ch·ªânh: Roboflow ‚Üí Normalization ‚Üí ML Training ‚Üí Meta-Learning")
    
    from dog_emotion_ml import EmotionMLClassifier, EnsembleMetaLearner, demo_data_pipeline
    
    # Ch·∫°y demo pipeline
    demo_data_pipeline()
    
    print("‚úÖ Demo Complete Pipeline ho√†n th√†nh!")


def main():
    """Ch·∫°y t·∫•t c·∫£ demos"""
    print("üöÄ DOG EMOTION RECOGNITION - ROBOFLOW PIPELINE DEMO")
    print("=" * 60)
    print("Demo c√°c t√≠nh nƒÉng m·ªõi trong package dog_emotion_ml v2.1.0:")
    print("- RoboflowDataProcessor: X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ Roboflow")
    print("- DataNormalizer: Chu·∫©n h√≥a n√¢ng cao theo y√™u c·∫ßu")
    print("- Advanced normalization trong EmotionMLClassifier")
    print("- Pipeline t√≠ch h·ª£p ho√†n ch·ªânh")
    print("=" * 60)
    
    try:
        # Demo t·ª´ng component
        demo_roboflow_processor()
        demo_data_normalizer()
        demo_emotion_ml_with_advanced_normalization()
        demo_roboflow_integration()
        demo_complete_pipeline()
        
        print("\n" + "=" * 60)
        print("üéâ T·∫§T C·∫¢ DEMOS ƒê√É HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
        print("Package dog_emotion_ml v2.1.0 ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng!")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå L·ªói trong qu√° tr√¨nh demo: {e}")
        print("Vui l√≤ng ki·ªÉm tra l·∫°i c√†i ƒë·∫∑t package v√† dependencies.")


if __name__ == "__main__":
    main() 